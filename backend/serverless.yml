service:
  name: serverless-books-mngmnt-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-tracing

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'

  tracing:
    lambda: true
    apiGateway: true

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
  account: 876765129958

  environment:
    BOOKS_TABLE: Books-${self:provider.stage}
    USER_ID_ADDED_AT_INDEX: UserIdAddedAtIndex
    BOOK_IMAGES_S3_BUCKET: serverless-book-images-${self:provider.account}-${self:provider.stage}

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Books Management API
        description: Serverless application for managing Books
    models:
      - name: AddBookRequest
        contentType: application/json
        schema: ${file(models/add-book-request.json)}
      - name: UpdateBookRequest
        contentType: application/json
        schema: ${file(models/update-book-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
#  RS256Auth:
#    handler: src/lambda/auth/rs256Auth0Authorizer.handler

  GetBooks:
    handler: src/lambda/http/getBooks.handler
    events:
      - http:
          method: get
          path: books
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}/index/${self:provider.environment.USER_ID_ADDED_AT_INDEX}

  AddBook:
    handler: src/lambda/http/addBook.handler
    events:
      - http:
          method: post
          path: books
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Add a new book
            description: Add a new book
            requestModels:
              'application/json': AddBookRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}

  UpdateBook:
    handler: src/lambda/http/updateBook.handler
    events:
      - http:
          method: patch
          path: books/{bookId}
#          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update an existing book
            description: Update an existing book
            requestModels:
              'application/json': UpdateBookRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}

  DeleteBook:
    handler: src/lambda/http/deleteBook.handler
    events:
      - http:
          method: delete
          path: books/{bookId}
#          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: books/{bookId}/attachment
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.BOOK_IMAGES_S3_BUCKET}/*

resources:
  Resources:
    BooksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: bookId
            AttributeType: S
          - AttributeName: addedAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: bookId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.BOOKS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_ADDED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: addedAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    BookImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BOOK_IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.BOOK_IMAGES_S3_BUCKET}/*'
        Bucket: !Ref BookImagesBucket

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false